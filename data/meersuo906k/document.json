{
    "js": {
        "code": "\nlet vscale = (v,factor) => v.map(n => n * factor)\nlet vadd = (a,b) => a.map((asubi,i) => asubi + b[i]) // a-> + b-> \nlet vdiff = (a,b) => vadd(a,vscale(b,-1));\nlet vsub = vdiff;\nlet vlerp = (a,b,factor) => vadd(a,vscale(vdiff(b,a),factor))\nlet vdot = (a,b) => a.reduce((accum,asubi,i) => accum + asubi * b[i],0)\nLA = { vlerp: vlerp };\n  const partition = numBuckets => {\n    let result = [];\n    for (let i = 0; i < numBuckets; i += 1) {\n        result.push(i/numBuckets);\n    }\n    return result;\n  }\n\n  \nlet scale = (n, factor) => n * factor;\nlet lerp = (a,b,factor) => scale(b - a, factor);\n//console.log(lerp(0,10,0.4));\n\n\nconst bucketize = (min, max, numBuckets) => partition(numBuckets)\n    .map(tween => lerp(min,max,tween))\n//console.log(bucketize(200,856,5));\n\nlet justProp = (anArray,prop) => anArray.map(o => o[prop]);\n  \nconst getMinMax = function(anArray,variable) {\n  let values = anArray.map(o => o[variable]);\n  return {\n    min: Math.min(...values), \n    max: Math.max(...values) \n  };\n  ////return [ Math.min(...values), Math.max(...values) ];\n}\nlet data = [\n  { age: 32, weight: 120, balance: 0   },\n  { age: 22, weight: 130, balance: 254 },\n  { age: 52, weight:  40, balance: 121 },\n  { age: 24, weight: 270, balance: 21 }\n];\n\nlet riff = (anArray,numBuckets) => {\n  return Object.keys(anArray[0]).reduce(\n    (accum,col) => {\n      //console.log(col);\n      //let justCol = justProp(anArray,col);\n      //console.log(justCol);\n      let minMax = getMinMax(anArray,col);\n      //console.log(minMax);\n    accum[col] = {\n      ...minMax, //merge in its properties\n      buckets: bucketize(minMax.min,minMax.max,numBuckets)\n    }\n\n    return accum;\n  },{})\n}\nlet riffedData = riff(data,5);\nconsole.log(riffedData);\n\n//let mm = getMinMax(data,'age');\n//let justWeight = justProp(data,'weight');\n//console.log(justWeight);\n\n",
        "transformer": "js"
    },
    "css": {
        "code": "",
        "transformer": "css"
    },
    "html": {
        "code": "",
        "transformer": "html"
    },
    "showPans": [
        "js",
        "console"
    ],
    "activePan": "js"
}